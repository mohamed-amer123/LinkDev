<?php
use \Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;
use Drupal\views\Plugin\views\cache\CachePluginBase;
use Drupal\views\ViewExecutable;

/**
* Implements hook_form_FORM_ID_alter().
* add validation for add event form
*/
function event_management_form_node_event_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
    $form["#validate"][] = "event_management_validation";
    $form["actions"]["submit"]["#access"] = true;
}
// add validation for edit event form
function event_management_form_node_event_edit_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
    $form["#validate"][] = "event_management_validation";
    $form["actions"]["submit"]["#access"] = true;
}
// add validation for add session form
function event_management_form_node_session_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
    $form["#validate"][] = "event_management_session_validation";
    $form["actions"]["submit"]["#access"] = true;
}
// add validation for edit session form
function event_management_form_node_session_edit_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
    $form["#validate"][] = "event_management_session_validation";
    $form["actions"]["submit"]["#access"] = true;
}
// Event Validation.
function event_management_validation(&$form, FormStateInterface $form_state){
    $values = $form_state->getValues();
    /**
     * @var \Drupal\Core\Datetime\DrupalDateTime $end_date
     */
    $end_date = $values["field_end_date"][0]["value"];
    /**
     * @var \Drupal\Core\Datetime\DrupalDateTime $start_date
     */
    $start_date = $values["field_start_date"][0]["value"];
    $current_date = time();
    if ($start_date->getTimestamp() <= $current_date) {
        $form_state->setErrorByName("field_start_date",t("Start Date must be future date."));
    }
    if ($start_date->getTimestamp() >= $end_date->getTimestamp()) {
        $form_state->setErrorByName("field_end_date",t("End Date must be grater than Start Date."));
    }
}
// Session validation
function event_management_session_validation(&$form, FormStateInterface $form_state){
    $values = $form_state->getValues();
    $event_id = $values["field_belongs_to_event"][0]["target_id"];
    $event = Node::load($event_id);
    $event_start = $event->get('field_start_date')->date->getTimestamp();
    $event_end = $event->get('field_end_date')->date->getTimestamp();
    /**
     * @var \Drupal\Core\Datetime\DrupalDateTime $end_date
     */
    $session_end = $values["field_session_end_date"][0]["value"]->getTimestamp();
    /**
     * @var \Drupal\Core\Datetime\DrupalDateTime $start_date
     */
    $session_start = $values["field_session_start_date"][0]["value"]->getTimestamp();
    if ($session_start < $event_start || $session_start > $event_end) {
        $form_state->setErrorByName("field_session_start_date",t("Session start must be in event period."));
        return;
    }
    if ($session_end < $event_start || $session_start > $event_end) {
        $form_state->setErrorByName("field_session_end_date",t("Session end must be in event period."));
        return;
    }
    if ($session_start >= $session_end) {
        $form_state->setErrorByName("field_session_start_date",t("Session start must be less than session end."));
    }
}

/**
 * Implements hook_views_data_alter().
 * add custom filter to views
 */
function event_management_views_data_alter(&$data): void {
  $data['node_field_data']['field_event_filter'] =
  [
    'title' => t('Filter events by user role'),
    'filter' => [
      'group' => t('Content'),
      'title' => t('Events by role'),
      'id' => 'filter_by_role',
    ],
  ];
}

/**
* Implements hook_views_post_render().
*/
function event_management_views_post_render(ViewExecutable $view, &$output, CachePluginBase $cache) {
    // display only selected items from config form 
    $event_number = \Drupal::config("event_management.settings")->get("event_number");
    if ($event_number>0) {
        if ($view->id() == "events") {
            $output["#rows"][0]["#rows"] = array_slice($output["#rows"][0]["#rows"], 0, $event_number);
        }
    }
}

/**
* Implements hook_views_pre_execute().
*/
function event_management_views_pre_execute(ViewExecutable $view) {
    // display items in pagination but need more work and testing.
    $event_number = \Drupal::config("event_management.settings")->get("event_number");
    if ($view->id() === 'events' && $view->current_display === 'page_1') {
        // $view->setItemsPerPage($event_number);
        if (isset($view->pager->options)) {
            // $view->pager->options['items_per_page'] = $event_number;
        }
    }
}